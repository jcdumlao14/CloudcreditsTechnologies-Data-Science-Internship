# -*- coding: utf-8 -*-
"""deployment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1f8Hmn8tom9Hi1gaNzTyVyKoXoiJyW6OA

# **10. üöÄ Deploy the Model**
"""

!pip install flask flask-cors scikit-learn pandas joblib

from flask import Flask, request, jsonify
from flask_cors import CORS
import joblib
import pandas as pd
import traceback
import socket

# Initialize Flask app
app = Flask(__name__)
CORS(app)

# Load model and scaler
try:
    model = joblib.load('/content/isolation_forest_model.joblib')
    scaler = joblib.load('/content/scaler.joblib')
    print("‚úÖ Model and scaler loaded successfully.")
except FileNotFoundError as e:
    print(f"‚ùå Error: {e}")
    exit(1)

@app.route('/')
def home():
    return jsonify({
        'message': 'API is running. POST JSON to /predict like {"network_in": 12345}'
    })

@app.route('/predict', methods=['POST'])
def predict():
    try:
        data = request.get_json()
        if not data or 'network_in' not in data:
            return jsonify({'error': "Missing 'network_in' in request JSON"}), 400

        network_in = data['network_in']
        df = pd.DataFrame({'network_in': [network_in]})
        df['network_in_scaled'] = scaler.transform(df[['network_in']])
        X_new = df[['network_in_scaled']]

        prediction = model.predict(X_new)
        result = "Normal" if prediction[0] == 1 else "Anomaly"

        return jsonify({
            'network_in': network_in,
            'prediction': int(prediction[0]),
            'result': result,
            'description': f"The network traffic is classified as {result}."
        })

    except Exception as e:
        traceback.print_exc()
        return jsonify({'error': str(e)}), 500

# Check if a port is free
def is_port_in_use(port):
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        return s.connect_ex(('127.0.0.1', port)) == 0

# Run the app
if __name__ == '__main__':
    preferred_port = 5000
    fallback_port = 5001

    if is_port_in_use(preferred_port):
        print(f"‚ö†Ô∏è Port {preferred_port} is already in use. Switching to port {fallback_port}...")
        port_to_use = fallback_port
    else:
        port_to_use = preferred_port

    app.run(debug=False, host='0.0.0.0', port=port_to_use)

"""## **OR Used this code for quick results.**"""

import joblib
import pandas as pd

model = joblib.load('/content/isolation_forest_model.joblib')
scaler = joblib.load('/content/scaler.joblib')

network_in = 4000
df = pd.DataFrame({'network_in': [network_in]})
df['network_in_scaled'] = scaler.transform(df[['network_in']])
X_new = df[['network_in_scaled']]

prediction = model.predict(X_new)
result = "Normal" if prediction[0] == 1 else "Anomaly"

print(f"Input: {network_in}, Prediction: {result}")

"""The model predicts that a network traffic volume of 4000 is an anomaly. This means the model has learned that a traffic volume of 4000 deviates significantly from the typical patterns it observed during training. This could indicate a potential network issue, security threat, or unusual activity that warrants further investigation."""