# -*- coding: utf-8 -*-
"""deploy.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Cjn9OAPKhabTb3i0uVAZd4ikDeI8Ng9n

# **10. ðŸš€ Deploy the Model (optional):**
- Save the trained model and the scaler for later use.
- Demonstrate how to load the saved model and scaler.

## **1. Setting Up (First Section - "Colab Setup and Drive Mounting")**
- **Connecting to Google Drive:** This part lets the code access files (`your trained model and scaler`) that are stored in your Google Drive. Think of it like plugging a USB drive into your computer.
"""

# --- Colab Setup and Drive Mounting ---
#from google.colab import drive
#drive.mount('/content/drive')

# --- Version Check (Uncomment if needed) ---
# import pandas as pd
# import sklearn

# print(f"Pandas version: {pd.__version__}")
# print(f"Scikit-learn version: {sklearn.__version__}")

# --- Library Installation (Uncomment ONLY if versions are wrong) ---
# !pip install pandas==<YOUR_PANDAS_VERSION>
# !pip install scikit-learn==<YOUR_SCIKIT_LEARN_VERSION>

"""## **2. Loading the Model and Scaler**
- **Finding the Model and Scaler:** The code looks for two specific files (`model.pkl and scaler.pkl`) in a folder on your Google Drive. These files contain the "brain" (`the model`) and a special tool (`the scaler`) that the code needs to make predictions.
- **Loading the "Brain" and the Tool:** The code opens these files and loads the information inside them into the computer's memory. It's like taking a recipe (the model) and a measuring cup (the scaler) out of the cupboard and putting them on the kitchen counter.
- **Error Check:** If the code can't find these files or if something goes wrong while loading them, it will print an error message and stop.
"""

# --- Paths to model, scaler, and script within Google Drive ---
MODEL_PATH = '/content/model.pkl'
SCALER_PATH = '/content/scaler.pkl'
#DEPLOY_PATH = '/content/drive/My Drive/my_model_folder/deploy.py'

"""## **3. The Prediction Function ("predict_price" function)**
- **Getting the Input Data:** The code receives a set of information about a house (like number of bedrooms, square footage, location, etc.). This is the information you want to use to predict the house price.
- **Preparing the Data:**
  - **Turning Data into a Table:** It takes that house information and puts it into a table format (like a spreadsheet).
  - **Creating New Features:** It calculates a couple of new features based on the existing ones (like the age of the house).
  - **Choosing the Right Columns:** It picks only the specific columns (features) that were used to train the model. This ensures the data is in the right format.
- **Scaling the Data:** The code uses the "scaler" tool (loaded earlier) to adjust the values of the input data. This is important because the model was trained on scaled data, and it needs to be scaled in the same way before making a prediction.
- **Making the Prediction:** The code feeds the prepared data into the "brain" (the model). The model then calculates and returns a predicted price for the house.
Handling Errors: If there's a problem during any of these steps (like missing information), the code will print an error message.
"""

# --- Deployment and Prediction  ---
import pandas as pd
import numpy as np
import pickle

# Load the model and scaler
try:
    with open(MODEL_PATH, 'rb') as f:  # Changed to use the Google Drive path
        model = pickle.load(f)
    with open(SCALER_PATH, 'rb') as f:  # Changed to use the Google Drive path
        scaler = pickle.load(f)
    print("Model and Scaler loaded successfully from Google Drive.")
except FileNotFoundError:
    print(f"Error: model.pkl or scaler.pkl not found. Make sure they are in the '{MODEL_PATH}' and '{SCALER_PATH}' directories.")
    exit()  # Exit the script if the files are not found
except Exception as e:
    print(f"Error loading model or scaler: {e}")
    exit()


def predict_price(data):
    """
    Predicts the house price based on input data.

    Args:
        data (dict): A dictionary containing the feature values for a single house.
                      The keys should match the feature names used during training.

    Returns:
        float: The predicted house price.
    """

    try:
        # 1. Create a DataFrame from the input data
        input_df = pd.DataFrame([data]) #Enclose data in a list to create a DataFrame correctly

        # 2. Feature Engineering (same as training)
        input_df['age'] = input_df['sale_year'] - input_df['yr_built']
        input_df['renovated'] = input_df['yr_renovated'].apply(lambda x: 1 if x > 0 else 0)


        # 3. Feature Selection (same as training)
        features = ['bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront',
                    'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built',
                    'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15',
                    'age', 'renovated', 'sale_year', 'sale_month'] # Added missing features


        input_df = input_df[features] # Keep only the selected features

        # 4. Scaling the input data
        input_scaled = scaler.transform(input_df)

        # 5. Make the prediction
        prediction = model.predict(input_scaled)[0]

        return prediction

    except KeyError as e:
        print(f"Error: Missing feature in input data: {e}.  Ensure your input data includes all required features (e.g., bedrooms, bathrooms, etc.)")
        return None  # Or raise the exception if you want to stop execution

    except Exception as e:
        print(f"An error occurred during prediction: {e}")
        return None # Or raise the exception

"""## **4. Example Usage (The if __name__ == '__main__': section)**
- **Sample Data:** This part provides an example of how to use the predict_price function. It creates a sample set of house information.
- **Calling the Prediction Function:** It calls the predict_price function, passing in the sample house information.
Displaying the Result: It takes the predicted price that the function returns and prints it on the screen. If the prediction failed, it prints an error message instead.
"""

# Example Usage (Testing)
if __name__ == '__main__':
    sample_data = {
        'bedrooms': 3,
        'bathrooms': 2.5,
        'sqft_living': 2000,
        'sqft_lot': 5000,
        'floors': 1,
        'waterfront': 0,
        'view': 0,
        'condition': 3,
        'grade': 7,
        'sqft_above': 1800,
        'sqft_basement': 200,
        'yr_built': 1990,
        'yr_renovated': 0,
        'zipcode': 98103,
        'lat': 47.65,
        'long': -122.35,
        'sqft_living15': 2200,
        'sqft_lot15': 4800,
        'sale_year': 2023,
        'sale_month': 10
    }

    predicted_price = predict_price(sample_data)

    if predicted_price is not None:
        print("Predicted House Price:", predicted_price)
    else:
        print("Prediction failed.  Check error messages above.")